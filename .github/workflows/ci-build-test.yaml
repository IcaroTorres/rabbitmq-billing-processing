name: ci-build-test
on:
  push: 
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  
jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: mkdir -p sonar/scanner && dotnet tool update dotnet-sonarscanner --tool-path sonar/scanner
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3.0.3
        with:
          # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x
          dotnet-version: 3.1.x
          # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
          dotnet-quality: validated
      
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar/scanner/dotnet-sonarscanner begin /k:"IcaroTorres_rabbitmq-billing-processing" /o:"icarotorres" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/UnitTests/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/UnitTests/TestResults/*.trx"
          dotnet build BillingProcessing.sln
          dotnet test src/Tests/UnitTests/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=UnitTests/TestResults/ --logger trx
          sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
